import Head from 'next/head'
import Setting from '../components/Setting'
import { useState, useEffect } from 'react'
import Main from '../components/Main'
import Dice from '../components/Dice'
import Player from '../components/Player'

export default function Home() {

  let players = ['仲', '高', '宇', '敏', '霞', '炜'];
  let [playerSlect, setPlayerSlect] = useState(players);
  let [playerList, setPlayerList] = useState([]);
  let [dieOne, setDieOne] = useState(2);
  let [dieTwo, setDieTwo] = useState(3);
  let [round, setRound] = useState(0);
  let [view, setView] = useState('setting');
  let [diceRecord, setDiceRecord] = useState(Array(11).fill(0)); 
  let [index, setIndex] = useState();
  let [currentPlayer, setCurrentPlayer] = useState();
  let [animation, setAnimation] = useState(false);
  let [count, setCount] = useState(0);
  let [diceData, setDiceData] = useState([]);
  let [selected, setSelected] = useState(Array(6).fill(false));


  useEffect(() => {

    const sound = new Audio("yyds.m4a");

    setTimeout(() => {
        setAnimation(false)
    }, 600);

    if (dieOne + dieTwo == 0 || dieOne + dieTwo == 10) {
        sound.play();
    }

    if (round !== 0) {

        let clone = diceRecord;
        clone[dieOne + dieTwo]++;
        setDiceRecord(clone);

        let dataClone = diceData;
        dataClone.push(dieOne + dieTwo + 2);
        setDiceData(dataClone);

    }

  }, [count])

  let playerSelectHandler = (e) => {

      let array = [];
      let clone = playerList;

      clone.push(e);

      for (let i = 0; i < playerSlect.length; i++) {
        if (playerSlect[i] !== e) {
          array.push(playerSlect[i]);
        }
      }

      setPlayerSlect(array);
      setPlayerList(clone);
  }

  let playerListHandler = (v, i) => {

      setCurrentPlayer(v);
      let clone = Array(playerList.length).fill(false);
      clone[i] = !clone[i];
      setSelected(clone);

  }

  let reset = () => {

      setPlayerList([]);
      setPlayerSlect(players);

  }

  let set = () => {

      setView('main');
      setRound(0);
      setDiceRecord(Array(11).fill(0));
      setIndex(playerList.indexOf(currentPlayer));
      setDiceData([]);

  }

  let reroll = () => {

      if (round !== 0) {

        setDieOne(Math.floor(Math.random()*6));
        setDieTwo(Math.floor(Math.random()*6));
        setCount(pre => pre + 1);
        setAnimation(true);

        let clone = diceRecord;
        clone[dieOne + dieTwo]--;
        setDiceRecord(clone);

        let dataClone = diceData;
        dataClone.pop();
        setDiceData(dataClone);

      }

  }

  let roll = () => {

      setDieOne(Math.floor(Math.random()*6));
      setDieTwo(Math.floor(Math.random()*6));
      setRound(pre => pre + 1);
      setCount(pre => pre + 1);
      setAnimation(true);

      if (index < playerList.length - 1){
          setIndex(pre => pre + 1);
          setCurrentPlayer(playerList[index + 1]);
      } else {
          setIndex(0);
          setCurrentPlayer(playerList[0]);
      };

  }

  let views = (view) => {
    switch (view) {
      case 'setting':
        return <Setting playerSlect={playerSlect} playerList={playerList} playerListHandler={playerListHandler} playerSelectHandler={playerSelectHandler} set={set} reset={reset} selected={selected} setView={setView} />;

      case 'main':
        return  <Main dieOne={dieOne} dieTwo={dieTwo} round={round} setView={setView} animation={animation} roll={roll} reroll={reroll} currentPlayer={currentPlayer} />;

      case 'dice':
        return <Dice diceRecord={diceRecord} setView={setView} />;

      case 'player':
        return <Player diceData={diceData} setView={setView} />;
    
      default:
        break;
    }
  }

  return (
    <div>
      <Head>
        <title>大爷显灵</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/yyds.jpg" />
      </Head>
      {views(view)}
    </div>
  )
}


